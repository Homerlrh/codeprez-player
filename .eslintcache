[{"/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/index.js":"1","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/reportWebVitals.js":"2","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/App.js":"3","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/comps/Player.js":"4","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/comps/Mp3Player.js":"5","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/comps/TextEditor.js":"6","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/context/Provider.js":"7","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/helper/sessionStorageParser.js":"8"},{"size":500,"mtime":1610781249094,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1610781249094,"results":"11","hashOfConfig":"10"},{"size":209,"mtime":1610796779908,"results":"12","hashOfConfig":"10"},{"size":1175,"mtime":1610796901868,"results":"13","hashOfConfig":"10"},{"size":933,"mtime":1610796359111,"results":"14","hashOfConfig":"10"},{"size":966,"mtime":1610792411915,"results":"15","hashOfConfig":"10"},{"size":724,"mtime":1610795790502,"results":"16","hashOfConfig":"10"},{"size":498,"mtime":1610792525276,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"q3hauo",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"38"},"/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/index.js",[],["39","40"],"/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/reportWebVitals.js",[],"/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/App.js",[],"/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/comps/Player.js",["41"],"import React, {useState, useEffect, useContext} from \"react\";\nimport TextEditor from \"./TextEditor\";\nimport { ContentContext } from \"../context/Provider\";\nimport Mp3Player from \"./Mp3Player\";\n\nimport db from \"../db/example.json\";\n\nexport default function Player() {\n  //mock data\n  const data = JSON.parse(db);\n\n  const defaultContent = {\n    text:\"\",\n    currentTimestamp: 0,\n    onPlay: false\n  }\n  \n  const content = useContext(ContentContext || defaultContent);\n\n  const [text, setText] = useState(content.text);\n  const [timestamp, setTimestamp] = useState(content.currentTimestamp);\n  const [onPlay, setOnPlay] = useState(content.onPlay);\n\n  const handleTextParse = (data, timestamp) => {\n    const currentContent = data.snapshots.filter(element => element.timestamp === timestamp)[0];\n    return currentContent.text;\n  }\n\n  \n  useEffect(()=>{\n    if(onPlay) {\n      const interval = setInterval(() => {\n      setText(handleTextParse(data, (timestamp+1000)));\n      setTimestamp(timestamp+1000);\n    }, 1000);\n    return () => clearInterval(interval);\n    }\n  })\n\n  return(\n    <>\n      <Mp3Player />\n      <TextEditor currentText={text} onPlay={onPlay}/>\n    </>\n  )\n}","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/comps/Mp3Player.js",[],"/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/comps/TextEditor.js",["42","43"],"import React, {useState, useEffect, useContext} from \"react\";\nimport Editor from \"@monaco-editor/react\";\n\nexport default function TextEditor({currentText, onPlay, onEditing}) {\n  const [text, setText] = useState(currentText);\n  const [isEditorReady, setIsEditorReady] = useState(false);\n  \n  useEffect(() => {\n    if(onPlay)\n      setText(text);\n  },[text]);\n\n  function handleEditorDidMount() {\n    if(!onPlay)\n      setIsEditorReady(true);\n    //valueGetter.current = _valueGetter;\n  }\n\n  function handleShowValue() {\n    //alert(valueGetter.current());\n  }\n\n  const handleSaveChange = () => {\n    //TODO save code snippet into file\n  }\n\n  return (\n    <>\n      <button onClick={handleShowValue} disabled={!isEditorReady}>\n        Show value\n      </button>\n      <button onClick={handleSaveChange} />\n      <Editor\n        height=\"90vh\"\n        language=\"javascript\"\n        value={text}\n        editorDidMount={handleEditorDidMount}\n      />\n    </>\n  );\n  \n  \n}","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/context/Provider.js",["44","45"],"import React, {createContext,  useReducer} from \"react\";\nimport sessionStorageParser from \"../helper/sessionStorageParser\";\n\nconst defaultContent = sessionStorageParser();\nexport const ContentContext = createContext(defaultContent);\nexport const DispatchContent = createContext(null);\n\nexport const ContentProvider = ({children}) => {\n  \n  const [content, dispatchContent] = useReducer(\n    (content, changes) => {\n      sessionStorageParser(changes);\n      return {...content, ...changes}\n    },\n    defaultContent\n  );\n\n  return(\n    <ContentContext.provider value={content}>\n      <DispatchContent.provider value={dispatchContent}>\n        {children}\n      </DispatchContent.provider>\n    </ContentContext.provider>\n  )\n}","/Users/shaojuanzhang/Study/SelfLearning/North/codeprez/src/helper/sessionStorageParser.js",["46"],"export default function sessionStorageParser(value) {\n  if(!value) {\n    //writing data to sessionstorage\n    const storage = { ... sessionStorage};\n    for(const key of Object.keys(storage)) {\n      storage[key] = JSON.parse(storage[key]);\n    }\n    return storage;\n  } else {\n    for(const key of Object.keys(value)) {\n      if(typeof value[key] === 'object') \n        sessionStorage.setItem(key, JSON.stringify(value[key]));\n      else\n        sessionStorage.setItem(key.value[key]);\n    }\n  }\n}",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":22,"column":18,"nodeType":"53","messageId":"54","endLine":22,"endColumn":27},{"ruleId":"51","severity":1,"message":"55","line":1,"column":37,"nodeType":"53","messageId":"54","endLine":1,"endColumn":47},{"ruleId":"56","severity":1,"message":"57","line":11,"column":5,"nodeType":"58","endLine":11,"endColumn":11,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":19,"column":5,"nodeType":"62","endLine":19,"endColumn":46},{"ruleId":"60","severity":1,"message":"61","line":20,"column":7,"nodeType":"62","endLine":20,"endColumn":57},{"ruleId":"63","severity":1,"message":"64","line":4,"column":26,"nodeType":"65","messageId":"66","endLine":4,"endColumn":27,"fix":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'setOnPlay' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onPlay'. Either include it or remove the dependency array.","ArrayExpression",["70"],"react/jsx-pascal-case","Imported JSX component provider must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"71","text":"72"},"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},[131,132],"","Update the dependencies array to be: [onPlay, text]",{"range":"75","text":"76"},[350,356],"[onPlay, text]"]